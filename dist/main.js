/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./jsfiles/AI.js":
/*!***********************!*\
  !*** ./jsfiles/AI.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"startAI_game\": () => (/* binding */ startAI_game)\n/* harmony export */ });\nlet DOMstuff=__webpack_require__(/*! ./DOMstuff */ \"./jsfiles/DOMstuff.js\");\n\n\nconst createDOMboardAI_mode=(boardname)=>{\n    let DOMboard=DOMstuff.createDOMboard(boardname);\n    DOMboard.switchShooter=(boardname)=>{\n        let opponent=document.querySelector(`.board-wrappers>:not(.${boardname})>.board`);\n        opponent.classList.toggle('ready');\n        document.querySelector(`.board-wrapper.${boardname}>.board`).classList.toggle('ready');\n        if(boardname==='AI') AI_turn();\n    }\n\n    DOMboard.announceWinner=(boardname)=>{\n        let continue_btn=document.createElement('button');\n        continue_btn.textContent='Continue';\n        document.querySelector('.board-wrappers').insertAdjacentElement('afterend',continue_btn);\n        document.querySelector(`.board.${boardname}`).classList.add('ready');\n        continue_btn.addEventListener('click',()=>{\n            document.querySelector('.board-wrappers').innerHTML=``;\n            document.querySelector('#change-mode-btn').style['opacity']='';\n            continue_btn.remove();\n            startAI_game();\n        })\n        document.querySelector('#current-info').textContent=`${(boardname==='p1')?'AI':'p1'} wins`;\n    }\n\n    let createDOMboard=Object.create(DOMboard);\n\n\n    return createDOMboard\n}\n\nconst startAI_game=()=>{\n    let curr_info=document.querySelector('#current-info');\n    curr_info.textContent='';\n    document.querySelector('.board-wrappers').innerHTML=``;\n    let start_btn=document.createElement('button');\n    start_btn.textContent='Start';\n    let p1=createDOMboardAI_mode('p1');\n    let p2=createDOMboardAI_mode('AI');\n    p1.addDOMboard();\n    p1.updateBoard();\n    p1.getDOMboard().classList.toggle('ready');\n    p1.addBoardbtn();\n    let readybutton1=document.querySelector(`.board-wrapper.p1 .ready-btn`);\n    readybutton1.addEventListener('click',()=>{\n        p1.readyDOMboard();\n        curr_info.textContent='Press start when you are ready';\n        document.querySelector('.board-wrappers').insertAdjacentElement('afterend',start_btn);\n    });\n    curr_info.textContent='Your turn to set up the board';\n\n\n    start_btn.addEventListener('click',()=>{\n        document.querySelector('#change-mode-btn').style['opacity']='0';\n        p1.startgame();\n        p1.getDOMboard().style['pointer-events']='none'\n        p2.addDOMboard();\n        p2.startgame();\n        p2.getDOMboard().classList.toggle('ready');\n        start_btn.remove();  \n    })\n}\n\nconst createshootableboard=()=>{\n    let board=[];\n    document.querySelectorAll('.p1 .row').forEach((row,i)=>{\n        let availablespot=[i,[]];\n        row.querySelectorAll('div').forEach((square,k)=>{\n            if(square.classList.length<3){\n                availablespot[1]=[...availablespot[1],k];\n            }\n        })\n        if(availablespot[1].length>0)board=[...board,availablespot];\n    })\n    return board\n}\n\n\n//the AI has 3 mode\n// mode 1: it tries to randomly shoot a spot on your board\n// if it hits than it move on to mode 2\n// mode 2: now that it hit a spot it is going to try to\n// check if the ship is vertical or not\n// mode 3: it try to shoot right or down based on the result of the \n// previous mode to finish the ship. If it hits a roadblock(the end of the row\n// or the next suqare has already been shot) it returns to the first square in mode 1\n// and start to shoot left or up untill the ship is sunk\nlet mode=1;\nlet directions=[[[1,0],[-1,0]],[[0,1],[0,-1]]];\nlet currdirection\nlet hitpos;\nlet ships=9;\n\nconst randomInt=(min,max)=>Math.floor(Math.random()*(max-min)+min);\n\nconst shootBoard=(gridlocation)=>{\n    gridlocation.dispatchEvent(new Event('click'));\n}\n\nconst shootBoardAsync=(gridlocation,min,max)=>{\n    return new Promise((resolve)=>{\n        setTimeout(function(){\n            resolve(shootBoard(gridlocation))\n        },randomInt(min,max))\n    })\n}\n\n\nconst AI_turn=()=>{\n    if(ships===0) return\n    if(mode===1){\n        AI_mode1();\n        return\n    }\n    if(mode===2){\n        AI_mode2();\n        return\n    }\n}\n\nconst AI_mode1=async()=>{\n    let p1=document.querySelector('.p1');\n    let board =createshootableboard();\n    let randomrowindex=randomInt(0,board.length);\n    let randomrow=board[randomrowindex][0];\n    let randomcolkindex=randomInt(0,board[randomrowindex][1].length);\n    let randomcol=board[randomrowindex][1][randomcolkindex];\n    let pos=[randomcol,randomrow];\n    let targetedsquare=p1.querySelector(`.row${pos[1]}.col${pos[0]}`);\n    await shootBoardAsync(targetedsquare,1000,2000);\n\n\n    if(targetedsquare.classList[2]==='hit'){\n        mode=2;\n        hitpos=pos;\n        AI_mode2();\n    }\n    return\n}\n\nconst AI_mode2=async ()=>{\n    let p1=document.querySelector('.p1');\n    if(directions.length<1){\n        mode=1;\n        directions=[[[1,0],[-1,0]],[[0,1],[0,-1]]];\n        ships--;\n        AI_mode1();\n        return\n    }\n    let randomaxisindex=randomInt(0,directions.length);\n    let randomaxis=directions[randomaxisindex];\n    let randomdirectionindex=randomInt(0,randomaxis.length);\n    let randomdirection=randomaxis[randomdirectionindex];\n    directions[randomaxisindex].splice(randomdirectionindex,1);\n    if(directions[randomaxisindex].length<1) directions.splice(randomaxisindex,1);\n    let pos=[hitpos[0]+randomdirection[0],hitpos[1]+randomdirection[1]];\n    if(pos[0]>-1&&pos[0]<10&&pos[1]>-1&&pos[1]<10){\n        let square=p1.querySelector(`.row${pos[1]}.col${pos[0]}`);\n        if(square.classList.length<3){\n            await shootBoardAsync(square,1000,1500);\n            if(square.classList[2]==='hit'){\n                directions=directions.slice(randomaxisindex,randomaxisindex+1);\n                currdirection=randomdirection;\n                AI_mode3();\n            }\n            return;\n        }\n    }\n    AI_mode2();\n    return\n}\n\nconst AI_mode3=async ()=>{\n    let p1=document.querySelector('.p1');\n    let pos=[hitpos[0]+currdirection[0]+currdirection[0],\nhitpos[1]+currdirection[1]+currdirection[1]];\n    while(pos[0]>-1&&pos[0]<10&&pos[1]>-1&&pos[1]<10){\n        let square=p1.querySelector(`.row${pos[1]}.col${pos[0]}`);\n        if(square.classList.length<3){\n            await shootBoardAsync(square,1000,1000);\n            if(square.classList[2]!=='hit'){\n                return\n            }\n            else {\n                pos=[pos[0]+currdirection[0],\n                pos[1]+currdirection[1]];\n                continue;\n            }\n        }\n        AI_mode2();\n        return;\n    }\n    AI_mode2();\n    return;\n}\n\n\n\n\n//# sourceURL=webpack://battleship/./jsfiles/AI.js?");

/***/ }),

/***/ "./jsfiles/DOMstuff.js":
/*!*****************************!*\
  !*** ./jsfiles/DOMstuff.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createDOMboard\": () => (/* binding */ createDOMboard)\n/* harmony export */ });\n\nconst {Board,Ship}= __webpack_require__(/*! ./battlship */ \"./jsfiles/battlship.js\");\n\n//prevent ship from dropping outside the board\nwindow.addEventListener('dragover', e => {\n    if (e.target.classList[0]!=='board') {\n      e.preventDefault()\n    }\n  })\n  \n\n\n\n\nconst createDOMboard=function (boardname){\n    let newDOMboard=document.createElement('div');\n    newDOMboard.className=`board-wrapper flex ${boardname}`;\n    newDOMboard.innerHTML=`\n    <div class=\"board ${boardname}\">\n\n    </div>`\n\n\n\n    let readystatus=false;\n    const board=Board(9,{\n        Battleship1:new Ship(\"Battleship1\",4,true),\n        Battleship2:new Ship(\"Battleship2\",4,true),\n\n        Cruiser1:new Ship(\"Cruiser1\",3,true),\n        Cruiser2:new Ship(\"Cruiser2\",3,true),\n        Cruiser3:new Ship(\"Cruiser3\",3,true),\n        Destroyer1:new Ship(\"Destroyer1\",2,true),\n        Destroyer2:new Ship(\"Destroyer2\",2,true),\n        Destroyer3:new Ship(\"Destroyer3\",2,true),\n        Destroyer4:new Ship(\"Destroyer4\",2,true),\n    });\n    board.randomPlace();\n    let getboard=board.getBoard();\n\n\n    let boardMethods={}\n\n\n    boardMethods.getReadyStatus=()=>readystatus;\n\n\n    boardMethods.placeDOMship=function (name,maxlen,isVertical,pos){\n        let DOMboard=document.querySelector(`.board.${boardname}`);\n        if(isVertical==='true'){\n            for(let i=0,k=0;i<maxlen;i++,k++){\n                DOMboard.querySelector(`.row${pos[0]+k}.col${pos[1]}`)\n                .className=`row${pos[0]+k} col${pos[1]} ship ${name} ${i} ${maxlen} ${isVertical}`;\n                DOMboard.querySelector(`.row${pos[0]+k}.col${pos[1]}`)\n                .draggable=true;\n            }\n        }\n        else{\n            for(let i=0,k=0;i<maxlen;i++,k++){\n                DOMboard.querySelector(`.row${pos[0]}.col${pos[1]+k}`)\n                .className=`row${pos[0]} col${pos[1]+k} ship ${name} ${i} ${maxlen} ${isVertical}`;\n                DOMboard.querySelector(`.row${pos[0]}.col${pos[1]+k}`)\n                .draggable=true;\n            } \n        }\n    }\n\n\n    boardMethods.deleteDOMship=function (pos){\n        let DOMboard=document.querySelector(`.board.${boardname}`);\n        const shipInfo=DOMboard.querySelector(`.row${pos[0]}.col${pos[1]}`).classList;\n        const index=+shipInfo[4];\n        const maxlen=+shipInfo[5];\n        const isVertical=shipInfo[6];\n        if(isVertical==='true'){\n            for(let i=index,k=0;i<maxlen;i++,k++){\n                DOMboard.querySelector(`.row${pos[0]+k}.col${pos[1]}`)\n                .className=`row${pos[0]+k} col${pos[1]}`;\n                DOMboard.querySelector(`.row${pos[0]+k}.col${pos[1]}`)\n                .draggable=false;\n            } \n            for(let i=index-1,k=1;i>-1;i--,k++){\n                DOMboard.querySelector(`.row${pos[0]-k}.col${pos[1]}`)\n                .className=`row${pos[0]-k} col${pos[1]}`;\n                DOMboard.querySelector(`.row${pos[0]-k}.col${pos[1]}`)\n                .draggable=false;\n            }\n        }\n        else{\n            for(let i=index,k=0;i<maxlen;i++,k++){\n                DOMboard.querySelector(`.row${pos[0]}.col${pos[1]+k}`)\n                .className=`row${pos[0]} col${pos[1]+k}`;\n                DOMboard.querySelector(`.row${pos[0]}.col${pos[1]+k}`)\n                .draggable=false;\n            } \n            for(let i=index-1,k=1;i>-1;i--,k++){\n                DOMboard.querySelector(`.row${pos[0]}.col${pos[1]-k}`)\n                .className=`row${pos[0]} col${pos[1]-k}`;\n                DOMboard.querySelector(`.row${pos[0]}.col${pos[1]-k}`)\n                .draggable=false;\n            }\n        }\n    }\n\n\n    boardMethods.dragoverhandler=function(ev){\n        ev.preventDefault();\n    }\n\n\n    boardMethods.handleDrop=function (ev){\n        ev.preventDefault();\n        window.removeEventListener('drop',this.preventDropping);\n        let shipInfo=ev.dataTransfer.getData(\"Text\").split(',');\n        if(shipInfo[7]!==boardname) return\n        const name=shipInfo[3];\n        const length=+shipInfo[5];\n        const index=+shipInfo[4];\n        const vertical=shipInfo[6];\n        const lastposX=(vertical==='true')?+shipInfo[1][3]:(+shipInfo[1][3])-index;\n        const lastposY=(vertical==='true')?(+shipInfo[0][3])-index:+shipInfo[0][3];\n        let lastpos=[lastposY,lastposX];\n        let classname=ev.target.classList[0]||''\n        //prevent ship from dropping to another board\n        if(!classname.includes('row')){\n            board.placeShip(name,lastpos);\n            this.placeDOMship(name,length,vertical,lastpos);\n            document.querySelector('.dragedShip').remove();\n            return\n        }\n\n\n        if(ev.target.parentElement.parentElement.classList[0]!=='board'){\n            board.placeShip(name,lastpos);\n            this.placeDOMship(name,length,vertical,lastpos);\n            document.querySelector('.dragedShip').remove();\n            return\n        }\n\n\n        const posX=(vertical==='true')?+ev.target.classList[1][3]:(+ev.target.classList[1][3])-index;\n        const posY=(vertical==='true')?(+ev.target.classList[0][3])-index:+ev.target.classList[0][3];\n        let pos=[posY,posX];\n\n\n        if(board.placeShip(name,pos)&&ev.target.parentElement.parentElement.className.includes(boardname)){\n            this.placeDOMship(name,length,vertical,pos);\n        }\n        else{\n            board.placeShip(name,lastpos);\n            this.placeDOMship(name,length,vertical,lastpos);\n        }\n        document.querySelector('.dragedShip').remove();\n    }\n\n\n    boardMethods.preventDropping=(function (e){\n        let classname=e.target.classList[0]||'';\n        if(e.dataTransfer.getData(\"Text\").split(',')[7]!==boardname) return\n        if (!classname.includes('row')) {\n          e.preventDefault();\n          this.handleDrop(e);\n        }\n    }).bind(boardMethods)\n\n\n\n\n    //function for dragstart and create a ghost image of the ship\n    boardMethods.handleDrag=function(ev){\n        window.addEventListener('drop',this.preventDropping);\n        let dragedshipinfo=[...ev.target.classList,boardname];\n        let dragedship=document.createElement('div');\n        let mouseposX=17.5*((dragedshipinfo[6]==='true')?1:Number(dragedshipinfo[4])*2+1);\n        let mouseposY=17.5*((dragedshipinfo[6]==='true')?Number(dragedshipinfo[4])*2+1:1);\n        dragedship.className=`dragedShip ${(dragedshipinfo[6]==='true')?'vertical':'horizontal'}`;\n\n        for(let i=0;i<dragedshipinfo[5];i++){\n            let dragedshippart=document.createElement('div');\n            dragedshippart.className='dragedShippart';\n            dragedship.appendChild(dragedshippart);\n        }\n\n\n        document.body.appendChild(dragedship);\n        ev.dataTransfer.setDragImage(dragedship,mouseposX,mouseposY);\n        ev.dataTransfer.setData(\"text\",dragedshipinfo);\n        board.deleteShip([+dragedshipinfo[0][3],+dragedshipinfo[1][3]]);\n        this.deleteDOMship([+dragedshipinfo[0][3],+dragedshipinfo[1][3]]);\n    }\n\n\n    boardMethods.changeDOMdirection=function (ev){\n        let ship=ev.target.classList;\n        if(ship.length<3) return\n        const name=ship[3];\n        const length=+ship[5];\n        const index=+ship[4];\n        const row=+ship[0][3];\n        const col=+ship[1][3];\n        const pos=(ship[6]==='true')?\n        [row-index,col]:[row,col-index];\n        const vertical=(ship[6]==='true')?'false':'true';\n        if(board.changeDirection(pos)){\n            this.deleteDOMship(pos);\n            this.placeDOMship(name,length,vertical,pos);\n        }\n    }\n\n\n    boardMethods.explodeDOMshippart=function(pos){\n        let DOMboard=document.querySelector(`.board.${boardname}`);\n        if(pos[0]-1>-1&&pos[0]-1<10){\n            if(!DOMboard.querySelector(`.row${pos[0]-1}.col${pos[1]}`).className.match(/hit|missed/g)){\n            DOMboard.querySelector(`.row${pos[0]-1}.col${pos[1]}`).classList.add('missed');\n            DOMboard.querySelector(`.row${pos[0]-1}.col${pos[1]}`).removeEventListener('click',this.firedDOMsquare);\n        }\n        if(pos[1]+1<10){\n            if(!DOMboard.querySelector(`.row${pos[0]-1}.col${pos[1]+1}`).className.match(/hit|missed/g)){\n                DOMboard.querySelector(`.row${pos[0]-1}.col${pos[1]+1}`).classList.add('missed');\n                DOMboard.querySelector(`.row${pos[0]-1}.col${pos[1]+1}`).removeEventListener('click',this.firedDOMsquare);\n            }\n        }\n        if(pos[1]-1>-1){\n            if(!DOMboard.querySelector(`.row${pos[0]-1}.col${pos[1]-1}`).className.match(/hit|missed/g)){\n                DOMboard.querySelector(`.row${pos[0]-1}.col${pos[1]-1}`).classList.add('missed');\n                DOMboard.querySelector(`.row${pos[0]-1}.col${pos[1]-1}`).removeEventListener('click',this.firedDOMsquare);\n            }\n        }\n        }\n        if(pos[0]+1>-1&&pos[0]+1<10){\n            if(!DOMboard.querySelector(`.row${pos[0]+1}.col${pos[1]}`).className.match(/hit|missed/g)){\n            DOMboard.querySelector(`.row${pos[0]+1}.col${pos[1]}`).classList.add('missed');\n            DOMboard.querySelector(`.row${pos[0]+1}.col${pos[1]}`).removeEventListener('click',this.firedDOMsquare);\n        }\n        if(pos[1]+1<10){\n            if(!DOMboard.querySelector(`.row${pos[0]+1}.col${pos[1]+1}`).className.match(/hit|missed/g)){\n                DOMboard.querySelector(`.row${pos[0]+1}.col${pos[1]+1}`).classList.add('missed');\n                DOMboard.querySelector(`.row${pos[0]+1}.col${pos[1]+1}`).removeEventListener('click',this.firedDOMsquare);\n            }\n        }\n        if(pos[1]-1>-1){\n            if(!DOMboard.querySelector(`.row${pos[0]+1}.col${pos[1]-1}`).className.match(/hit|missed/g)){\n                DOMboard.querySelector(`.row${pos[0]+1}.col${pos[1]-1}`).classList.add('missed');\n                DOMboard.querySelector(`.row${pos[0]+1}.col${pos[1]-1}`).removeEventListener('click',this.firedDOMsquare);\n            }\n        }\n        }\n        if(pos[1]+1<10){\n            if(!DOMboard.querySelector(`.row${pos[0]}.col${pos[1]+1}`).className.match(/hit|missed/g)){\n                DOMboard.querySelector(`.row${pos[0]}.col${pos[1]+1}`).classList.add('missed');\n                DOMboard.querySelector(`.row${pos[0]}.col${pos[1]+1}`).removeEventListener('click',this.firedDOMsquare);\n            }\n        }\n        if(pos[1]-1>-1){\n            if(!DOMboard.querySelector(`.row${pos[0]}.col${pos[1]-1}`).className.match(/hit|missed/g)){\n                DOMboard.querySelector(`.row${pos[0]}.col${pos[1]-1}`).classList.add('missed');\n                DOMboard.querySelector(`.row${pos[0]}.col${pos[1]-1}`).removeEventListener('click',this.firedDOMsquare);\n            }\n        }\n    }\n\n    \n    boardMethods.explodeDOMship=function(pos){\n        let shippart=getboard[pos[0]][pos[1]];\n        let index=shippart.index;\n        let maxlen=shippart.maxlen;\n        let vertical=shippart.vertical;\n\n        if(vertical){\n            for(let i=index,k=0;i<maxlen;i++,k++){\n                this.explodeDOMshippart([pos[0]+k,pos[1]]);\n            } \n            for(let i=index-1,k=1;i>-1;i--,k++){\n                this.explodeDOMshippart([pos[0]-k,pos[1]]);\n            }\n        }\n        else{\n            for(let i=index,k=0;i<maxlen;i++,k++){\n                this.explodeDOMshippart([pos[0],pos[1]+k]);\n            } \n            for(let i=index-1,k=1;i>-1;i--,k++){\n                this.explodeDOMshippart([pos[0],pos[1]-k]);\n            }\n        }\n    }\n\n\n    boardMethods.clearDOMboard=function(){\n        let DOMboard=document.querySelector(`.board.${boardname}`);\n        for(let i=0;i<getboard.length;i++){\n            for(let k=0;k<getboard[i].length;k++){\n                //reset the square\n                DOMboard.querySelector(`.row${i}.col${k}`)\n                .className=`row${i} col${k}`;\n                DOMboard.querySelector(`.row${i}.col${k}`)\n                .removeAttribute('draggable');\n                //replace the square to remove all eventListeners\n                DOMboard.querySelector(`.row${i}.col${k}`)\n                .replaceWith(DOMboard.querySelector(`.row${i}.col${k}`).cloneNode());\n            }\n        }\n    }\n\n\n    boardMethods.updateBoard=function(){\n        let DOMboard=document.querySelector(`.board.${boardname}`);\n        getboard=board.getBoard();\n        for(let i=0;i<getboard.length;i++){\n            for(let k=0;k<getboard[i].length;k++){\n                if(getboard[i][k]){\n                    DOMboard.querySelector(`.row${i}.col${k}`).className=DOMboard.querySelector(`.row${i}.col${k}`).className+` ship ${getboard[i][k].name} ${getboard[i][k].index} ${getboard[i][k].maxlen} ${getboard[i][k].vertical}`;\n                    DOMboard.querySelector(`.row${i}.col${k}`).draggable=true;\n                }\n                readystatus=true;\n                DOMboard.querySelector(`.row${i}.col${k}`).addEventListener('dragstart',this.handleDrag.bind(this));\n                DOMboard.querySelector(`.row${i}.col${k}`).addEventListener('click',this.changeDOMdirection.bind(this));\n                DOMboard.querySelector(`.row${i}.col${k}`).addEventListener('dragover',this.dragoverhandler.bind(this));\n                DOMboard.querySelector(`.row${i}.col${k}`).addEventListener('drop',this.handleDrop.bind(this));\n            }\n        }\n    }\n\n\n    boardMethods.readyDOMboard=function(){\n        let DOMboard=document.querySelector(`.board.${boardname}`);\n        readystatus=true;\n        DOMboard.classList.toggle('ready');\n        DOMboard.parentElement.querySelector('.button-wrapper').remove();\n        this.clearDOMboard();\n    }\n\n\n    boardMethods.startgame=function(){\n        let DOMboard=document.querySelector(`.board.${boardname}`);\n        for(let i=0;i<getboard.length;i++){\n            for(let k=0;k<getboard[i].length;k++){\n                //reset the square\n                DOMboard.querySelector(`.row${i}.col${k}`)\n                .className=`row${i} col${k}`;\n                //replace the square to remove all eventListeners\n                DOMboard.querySelector(`.row${i}.col${k}`)\n                .replaceWith(DOMboard.querySelector(`.row${i}.col${k}`).cloneNode());\n                //add the fired function\n                DOMboard.querySelector(`.row${i}.col${k}`)\n                .addEventListener('click',this.firedDOMsquare)\n            }\n        }\n    }\n\n\n    boardMethods.firedDOMsquare=(function(ev){\n        let DOMboard=document.querySelector(`.board.${boardname}`);\n        let posX=+ev.target.classList[1][3];\n        let posY=+ev.target.classList[0][3];\n        let fired=board.fired([posY,posX]);\n        if(fired[0]){\n            DOMboard.querySelector(`.row${posY}.col${posX}`).classList.add('hit');\n            (fired[1])?this.explodeDOMship([posY,posX]):0;\n            if(fired[2]){\n                this.announceWinner(boardname);\n            }\n            DOMboard.querySelector(`.row${posY}.col${posX}`).removeEventListener('click',this.firedDOMsquare);\n            return [true,false]\n        }\n        else{\n            DOMboard.querySelector(`.row${posY}.col${posX}`).classList.add('missed');\n            DOMboard.querySelector(`.row${posY}.col${posX}`).removeEventListener('click',this.firedDOMsquare);\n            this.switchShooter(boardname);\n            return [false]\n        }\n    }).bind(boardMethods)\n\n    boardMethods.randomBoard=function(){\n        this.clearDOMboard();\n        board.clearboard();\n        board.randomPlace();\n        this.updateBoard();\n    }\n\n    boardMethods.addBoardbtn=function() {\n        let DOMboard=document.querySelector(`.board.${boardname}`);\n        let button_wrapper=document.createElement('div');\n        button_wrapper.className='button-wrapper';\n        button_wrapper.innerHTML=`\n        <button class=\"ready-btn\">Ready</button>\n        <button class=\"random-btn\">Random!</button>\n        `\n        DOMboard.parentElement.appendChild(button_wrapper);\n\n        DOMboard.parentElement.querySelector('.random-btn').addEventListener('click',this.randomBoard.bind(this))\n    }\n\n\n\n    boardMethods.addDOMboard=function(){\n        document.querySelector('.board-wrappers').appendChild(newDOMboard);\n        let DOMboard=document.querySelector(`.board.${boardname}`);\n        for(let i=0;i<getboard.length;i++){\n            let newRow=document.createElement('div');\n            newRow.className=\"row\";\n            for(let k=0;k<getboard[i].length;k++){\n                let square=document.createElement('div');\n                square.className=`row${i} col${k}`;\n                newRow.appendChild(square);\n            }\n            DOMboard.appendChild(newRow);\n        }\n        DOMboard.classList.toggle('ready');\n    }\n\n    boardMethods.getDOMboard=()=>document.querySelector(`.board.${boardname}`)\n    boardMethods.printBoard=()=>board.getBoard()\n\n\n\n    return boardMethods\n    \n}\n\n\n\n//# sourceURL=webpack://battleship/./jsfiles/DOMstuff.js?");

/***/ }),

/***/ "./jsfiles/battlship.js":
/*!******************************!*\
  !*** ./jsfiles/battlship.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Board\": () => (/* binding */ Board),\n/* harmony export */   \"Ship\": () => (/* binding */ Ship)\n/* harmony export */ });\n\nclass Ship{\n    constructor(name,length,vertical){\n        this.name=name;\n        this.length=length;\n        this.vertical=vertical;\n        this.sink=false;\n        this.shipParts=[];\n        for(let i=0;i<length;i++){\n            this.shipParts.push(new ShipPart(name,i,length,vertical))\n        };\n    }\n\n    hit=(index)=>{\n        this.shipParts[index].hit=true;\n    }\n\n    setDirection=()=>{\n        for(let k=0;k<this.shipParts.length;k++)\n        this.shipParts[k].vertical=this.vertical;\n    }\n\n    isSunk=()=>{\n        for(let i=0;i<this.length;i++){\n            if(!this.shipParts[i].hit) return false\n        }\n        this.sink=true;\n        return true\n    }\n}\n\nclass ShipPart{\n    constructor(name,index,maxlen,vertical){\n        this.name=name;\n        this.index=index;\n        this.maxlen=maxlen;\n        this.vertical=vertical;\n        this.hit=false;\n    }\n}\n\n\n//a board object that takes in the number of ship as the first parameter\n//and an object that conatins ships\n\nconst Board= (shipamount,ships) =>{\n    let board=Array(10);\n    for(let i=0;i<10;i++){\n        board[i]=Array(10)\n        for(let k=0;k<10;k++){\n            board[i][k]=false;\n        }\n    };\n\n    const checkWin=()=>{\n        for(const i in ships) if(!ships[i].sink) return false\n        return true\n    }\n\n    const clearboard=()=>{\n        for(let i=0;i<board.length;i++){\n            for(let k=0;k<board[i].length;k++){\n                board[i][k]=false;\n            }\n        }\n    }\n\n    const explode= (pos)=>{\n        if(pos[0]-1>-1&&pos[0]-1<10){\n            (board[pos[0]-1][pos[1]]===false)?board[pos[0]-1][pos[1]]=true:0;\n            (board[pos[0]-1][pos[1]+1]===false)?board[pos[0]-1][pos[1]+1]=true:0;\n            (board[pos[0]-1][pos[1]-1]===false)?board[pos[0]-1][pos[1]-1]=true:0;\n        }\n        if(pos[0]+1>-1&&pos[0]+1<10){\n            (board[pos[0]+1][pos[1]]===false)?board[pos[0]+1][pos[1]]=true:0;\n            (board[pos[0]+1][pos[1]+1]===false)?board[pos[0]+1][pos[1]+1]=true:0;\n            (board[pos[0]+1][pos[1]-1]===false)?board[pos[0]+1][pos[1]-1]=true:0;\n        }\n        (board[pos[0]][pos[1]+1]===false)?board[pos[0]][pos[1]+1]=true:0;\n        (board[pos[0]][pos[1]-1]===false)?board[pos[0]][pos[1]-1]=true:0;\n    }\n\n    //hit all the spaces around the ship once it is sunk\n\n    const shipExplode= (pos,maxlen,isVertical)=>{\n        let index=board[pos[0]][pos[1]].index;\n        if(isVertical){\n            for(let i=index,k=0;i<maxlen;i++,k+=1){\n               explode([pos[0]+k,pos[1]]);\n            } \n            for(let i=index-1,k=1;i>-1;i--,k+=1){\n                explode([pos[0]-k,pos[1]]);\n            }\n        }\n        else{\n            for(let i=index,k=0;i<maxlen;i++,k+=1){\n                explode([pos[0],pos[1]+k]);\n             } \n            for(let i=index-1,k=1;i>-1;i--,k+=1){\n                 explode([pos[0],pos[1]-k]);\n            }\n        }\n    }\n\n    //fired at a ship part and check if a ship has sunk yet\n\n    const firedAndCheckedSunk= (name,i)=>{\n        ships[name].hit(i);\n        return(ships[name].isSunk())\n    }\n\n    //fired at the location return true if it's a ship part\n    //and return false if it's not\n    \n    const fired= (pos)=>{\n        if(pos[0]<board.length&&pos[1]<board[0].length\n            &&pos[0]>=0&&pos[1]>=0){\n                if(board[pos[0]][pos[1]]){\n                    const ship=board[pos[0]][pos[1]];\n                    board[pos[0]][pos[1]].hit=true\n                    if(firedAndCheckedSunk(ship.name,ship.index)){\n                       shipExplode(pos,ship.maxlen,ship.vertical);\n                       return[true,true,checkWin()]\n                    }\n                    return [true,false,false]\n                }\n                board[pos[0]][pos[1]]=true;\n                return [false]\n            }\n    }\n\n\n\n    //check for available spot\n\n    const checkSpace= (pos)=>{\n        if(board[pos[0]]) \n          return (board[pos[0]][pos[1]]!==undefined&&!board[pos[0]][pos[1]]&&checkAroundSpaces(pos))\n        return false\n    }\n\n    //check for spaces around the spot\n\n    const checkUp= (pos)=>{\n        //edge case\n        if(pos[0]===0) return true\n        if(pos[0]<board.length&&pos[1]<board[0].length\n            &&pos[0]>=0&&pos[1]>=0)\n          return (!board[pos[0]-1][pos[1]])\n        return false\n    }\n\n    const checkDown= (pos)=>{\n        //edge case\n        if(pos[0]===board.length-1) return true\n        if(pos[0]<board.length&&pos[1]<board[0].length\n            &&pos[0]>=0&&pos[1]>=0)\n          return (!board[pos[0]+1][pos[1]])\n        return false\n    }\n\n    const checkLeft= (pos)=>{\n        //edge case\n        if(pos[1]===0) return true\n        if(pos[0]<board.length&&pos[1]<board[0].length\n            &&pos[0]>=0&&pos[1]>=0)\n          return (!board[pos[0]][pos[1]-1]);\n        return false\n    }\n\n    const checkRight= (pos)=>{\n        //edge case\n        if(pos[1]===board.length-1) return true\n        if(pos[0]<board.length&&pos[1]<board[0].length\n            &&pos[0]>=0&&pos[1]>=0)\n           return (!board[pos[0]][pos[1]+1]);\n        return false\n    }\n\n    const checkUpLeft=(pos)=>{\n        //edge case\n        if(pos[0]===0) return true\n        if(checkUp(pos)){\n            let newPos=[pos[0]-1,pos[1]];\n            return checkLeft(newPos);\n        }\n        return false\n    }\n\n    const checkUpRight=(pos)=>{\n        //edge case\n        if(pos[0]===0) return true\n        if(checkUp(pos)){\n            let newPos=[pos[0]-1,pos[1]];\n            return checkRight(newPos);\n        }\n        return false\n    }\n\n    const checkDownLeft=(pos)=>{\n        //edge case\n        if(pos[0]===board.length-1) return true\n        if(checkDown(pos)){\n            let newPos=[pos[0]+1,pos[1]];\n            return checkLeft(newPos);\n        }\n        return false\n    }\n\n    const checkDownRight=(pos)=>{\n        //edge case\n        if(pos[0]===board.length-1) return true\n        if(checkDown(pos)){\n            let newPos=[pos[0]+1,pos[1]];\n            return checkRight(newPos);\n        }\n        return false\n    }\n\n    const checkAroundSpaces= (pos)=>{\n        return(\n            checkUp(pos)&&\n            checkDown(pos)&&\n            checkLeft(pos)&&\n            checkRight(pos)&&\n            checkUpLeft(pos)&&\n            checkUpRight(pos)&&\n            checkDownLeft(pos)&&\n            checkDownRight(pos)\n        )\n    }\n\n\n    //recursive function to check if you can place\n    //a ship and place it\n\n\n    const horizontalCheckAndPlace= (name,pos,len,index=0)=>{\n        if(!checkSpace(pos)) return false;\n\n        if(index===len-1){\n            board[pos[0]][pos[1]]=ships[name].shipParts[index];\n            return true;\n        }\n\n\n        if(horizontalCheckAndPlace(name,[pos[0],pos[1]+1],len,index+=1)){\n            board[pos[0]][pos[1]]=ships[name].shipParts[index-=1];\n            return true;\n        }\n\n        else return false\n    }\n\n    const verticalCheckAndPlace= (name,pos,len,index=0)=>{\n        if(!checkSpace(pos)) return false;\n\n        if(index===len-1){\n            board[pos[0]][pos[1]]=ships[name].shipParts[index];\n            return true;\n        }\n\n\n        if(verticalCheckAndPlace(name,[pos[0]+1,pos[1]],len,index+=1)){\n            board[pos[0]][pos[1]]=ships[name].shipParts[index-=1];\n            return true;\n        }\n\n        else return false\n    }\n\n\n    const placeShip=function (name,pos){\n        const ship=ships[name];\n        const shipLength=ship.length;\n        const shipName=ship.name;\n        const isVertical=ship.vertical;\n        if(isVertical) return verticalCheckAndPlace(shipName,pos,shipLength);\n        else return horizontalCheckAndPlace(shipName,pos,shipLength);\n    };\n\n    const deleteShip=(pos)=>{\n        let isVertical=board[pos[0]][pos[1]].vertical;\n        let index=board[pos[0]][pos[1]].index;\n        let maxlen=board[pos[0]][pos[1]].maxlen;\n        if(isVertical){\n            for(let i=index,k=0;i<maxlen;i++,k+=1){\n               board[pos[0]+k][pos[1]]=false;\n            } \n            for(let i=index-1,k=1;i>-1;i--,k+=1){\n                board[pos[0]-k][pos[1]]=false;\n            }\n        }\n        else{\n            for(let i=index,k=0;i<maxlen;i++,k+=1){\n                board[pos[0]][pos[1]+k]=false;\n             } \n            for(let i=index-1,k=1;i>-1;i--,k+=1){\n                board[pos[0]][pos[1]-k]=false;\n            }\n        }\n    }\n\n    //change direction of the ship\n     const changeDirection=(pos)=>{\n        const name=board[pos[0]][pos[1]].name;\n        const startPos=(board[pos[0]][pos[1]].vertical)?\n        [pos[0]-board[pos[0]][pos[1]].index,pos[1]]:\n        [pos[0],pos[1]-board[pos[0]][pos[1]].index];\n        deleteShip(startPos);\n        ships[name].vertical=(!ships[name].vertical);\n        ships[name].setDirection();\n        if(placeShip(name,startPos)){\n            return true;\n        }\n        else{\n            ships[name].vertical=(!ships[name].vertical);\n            ships[name].setDirection();\n            placeShip(name,startPos);\n            return false;\n        }\n    }\n\n    const horizontalRandomBoard=(len)=>{\n        let randomBoard=[];\n        for (let i=0; i<board.length;i++){\n            let row=[i,[]];\n            for (let k=0; k<board.length;k++){\n                if(board[i][k]!==false){\n                    let currlen=row[1].length-1;\n                    while(row[1][currlen]<k&&row[1][currlen]>=(k-len)){\n                        row[1].pop();\n                        currlen=row[1].length-1;\n                    }\n\n                    while(board[i][k]&&k<board.length)k++;\n\n                    continue;\n                }\n                if(!checkUp([i,k])||!checkDown([i,k])){\n                    let currlen=row[1].length-1;\n                    while(row[1][currlen]<k&&row[1][currlen]>=(k-len)){\n                        row[1].pop();\n                        currlen=row[1].length-1;\n                    }\n\n                    while((!checkUp([i,k])||!checkDown([i,k]))&&k<board.length) k++;\n                    continue;\n                }\n                if(!board[i][k]&&k<board.length-len+1) row[1]=[...row[1],k];\n            }\n            (row[1].length!==0)?randomBoard=[...randomBoard,row]:randomBoard;\n        }\n        return randomBoard;\n    }\n\n    const verticalRandomBoard= (len)=>{\n        let randomBoard=[];\n        for (let i=0; i<board.length;i++){\n            let col=[i,[]];\n            for (let k=0; k<board.length;k++){\n                if(board[k][i]!==false){\n                    let currlen=col[1].length-1;\n                    while(col[1][currlen]<k&&col[1][currlen]>=(k-len)){\n                        col[1].pop();\n                        currlen=col[1].length-1;\n                    }\n\n                    while(board[k]&&k<board.length){\n                        if(board[k][i])k++;\n                        else break;\n                    }\n\n                    continue;\n                }\n                if(!checkLeft([k,i])||!checkRight([k,i])){\n                    let currlen=col[1].length-1;\n                    while(col[1][currlen]<k&&col[1][currlen]>=(k-len)){\n                        col[1].pop();\n                        currlen=col[1].length-1;\n                    }\n\n                    while(board[k]&&k<board.length){\n                        if((!checkLeft([k,i])||!checkRight([k,i])))k++;\n                        else break;\n                    }\n\n                    continue;\n                }\n                if(!board[k][i]&&k<board.length-len+1) col[1]=[...col[1],k];\n            }\n            (col[1].length!==0)?randomBoard=[...randomBoard,col]:randomBoard;\n        }\n        return randomBoard;\n    }\n\n    //create a random board that exclude all the spots that were\n    //fired or already taken\n    const createRandomBoard= (len,isVertical) =>{\n        if(isVertical){\n            return verticalRandomBoard(len);\n        }\n\n        return horizontalRandomBoard(len);\n    }\n\n    //radomly place all the ship on board\n\n    const randomPlace= ()=>{\n        try{\n            for(const i in ships){\n                (Math.floor(Math.random()*2)===0)?ships[i].vertical=true:ships[i].vertical=false;\n                //setting all ship part vertical property like the ship vertical property\n                for(let k=0;k<ships[i].shipParts.length;k++)\n                   ships[i].shipParts[k].vertical=ships[i].vertical;\n                //get all possible location to fired\n                let randomBoard=createRandomBoard(ships[i].length,ships[i].vertical);\n                let randomRow=Math.floor(Math.random()*randomBoard.length);\n                let randomCol=Math.floor(Math.random()*randomBoard[randomRow][1].length);\n                if(ships[i].vertical){\n                    placeShip(i,[randomBoard[randomRow][1][randomCol],randomBoard[randomRow][0]])\n                    \n                }\n                else{\n                    placeShip(i,[randomBoard[randomRow][0],randomBoard[randomRow][1][randomCol]])\n                }\n                \n            }\n        }\n        catch{\n            clearboard();\n            randomPlace();\n        }\n    }\n\n    const getBoard= () => board\n\n\n    return {\n        placeShip,\n        checkSpace,\n        horizontalCheckAndPlace,\n        verticalCheckAndPlace,\n        createRandomBoard,\n        randomPlace,\n        checkLeft,\n        checkRight,\n        checkUp,\n        checkDown,\n        horizontalRandomBoard,\n        verticalRandomBoard,\n        explode,\n        shipExplode,\n        fired,\n        firedAndCheckedSunk,\n        deleteShip,\n        clearboard,\n        changeDirection,\n        getBoard\n    };\n};\n\n\n\n\n//# sourceURL=webpack://battleship/./jsfiles/battlship.js?");

/***/ }),

/***/ "./jsfiles/co-opmode.js":
/*!******************************!*\
  !*** ./jsfiles/co-opmode.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"startCo_opgame\": () => (/* binding */ startCo_opgame)\n/* harmony export */ });\nconst DOMstuff= __webpack_require__(/*! ./DOMstuff */ \"./jsfiles/DOMstuff.js\");\n\n\nconst createDOMboardCo_opmode=(boardname)=>{\n    let DOMboard=DOMstuff.createDOMboard(boardname);\n\n    DOMboard.switchShooter=(boardname)=>{\n        let opponent=document.querySelector(`.board-wrappers>:not(.${boardname})>.board`);\n        opponent.classList.toggle('ready');\n        document.querySelector(`.board-wrapper.${boardname}>.board`).classList.toggle('ready');\n    }\n\n    DOMboard.announceWinner=(boardname)=>{\n        let continue_btn=document.createElement('button');\n        continue_btn.textContent='Continue';\n        document.querySelector('.board-wrappers').insertAdjacentElement('afterend',continue_btn);\n        document.querySelector(`.board.${boardname}`).classList.add('ready');\n        continue_btn.addEventListener('click',()=>{\n            document.querySelector('.board-wrappers').innerHTML=``;\n            document.querySelector('#change-mode-btn').style['opacity']='';\n            continue_btn.remove();\n            startCo_opgame();\n        })\n        document.querySelector('#current-info').textContent=`${(boardname==='p1')?'p2':'p1'} wins`;\n    }\n\n    return DOMboard\n}\n\n\n \n\nconst startCo_opgame=()=>{\n    let curr_info=document.querySelector('#current-info');\n    curr_info.textContent='';\n    document.querySelector('.board-wrappers').innerHTML=``;\n    let start_btn=document.createElement('button');\n    start_btn.textContent='Start';\n    let p1=createDOMboardCo_opmode('p1');\n    let p2=createDOMboardCo_opmode('p2');\n    p1.addDOMboard();\n    p2.addDOMboard();\n    p1.updateBoard();\n    p1.getDOMboard().classList.toggle('ready');\n    curr_info.textContent='p1 turn to set up the board (don\\'t let the other player see you)';\n\n\n    p1.addBoardbtn();\n    let readybutton1=document.querySelector(`.board-wrapper.p1 .ready-btn`);\n    readybutton1.addEventListener('click',()=>{\n        p1.readyDOMboard();\n        p2.updateBoard();\n        p2.getDOMboard().classList.toggle('ready');\n        p2.addBoardbtn();\n        let readybutton2=document.querySelector(`.board-wrapper.p2 .ready-btn`);\n        readybutton2.addEventListener('click',()=>{\n            p2.readyDOMboard.bind(p2)();\n            curr_info.textContent='Press start when both players are ready.';\n            document.querySelector('.board-wrappers').insertAdjacentElement('afterend',start_btn)\n        });\n        curr_info.textContent='p2 turn to set up the board (don\\'t let the other player see you)';\n    })\n\n    start_btn.addEventListener('click',()=>{\n        document.querySelector('#change-mode-btn').style['opacity']='0';\n        p1.startgame();\n        p2.startgame();\n        p2.getDOMboard().classList.toggle('ready');\n        start_btn.remove();\n        curr_info.textContent='';\n    })\n\n}\n\n\n\n\n\n//# sourceURL=webpack://battleship/./jsfiles/co-opmode.js?");

/***/ }),

/***/ "./jsfiles/mainDOM.js":
/*!****************************!*\
  !*** ./jsfiles/mainDOM.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const {startCo_opgame}= __webpack_require__(/*! ./co-opmode */ \"./jsfiles/co-opmode.js\");\nconst {startAI_game}= __webpack_require__(/*! ./AI.js */ \"./jsfiles/AI.js\");\nstartCo_opgame();\n\ndocument.querySelector('#change-mode-btn').addEventListener('click',changeMode);\n\nfunction changeMode(){\n    let change_mode_btn=document.querySelector('#change-mode-btn');\n    if(change_mode_btn.textContent==='Co-op mode'){\n        startCo_opgame();\n        document.querySelector('#change-mode-btn').textContent='AI mode';\n        return\n    }\n    if(change_mode_btn.textContent==='AI mode'){\n        startAI_game()\n        document.querySelector('#change-mode-btn').textContent='Co-op mode';\n        return\n    }\n}\n\n//# sourceURL=webpack://battleship/./jsfiles/mainDOM.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__("./jsfiles/DOMstuff.js");
/******/ 	__webpack_require__("./jsfiles/mainDOM.js");
/******/ 	__webpack_require__("./jsfiles/co-opmode.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./jsfiles/AI.js");
/******/ 	
/******/ })()
;